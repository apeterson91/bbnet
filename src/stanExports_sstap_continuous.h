// Generated by rstantools.  Do not edit by hand.

/*
    rsstap is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rsstap is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rsstap.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_sstap_continuous_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sstap_continuous");
    reader.add_event(3, 3, "include", "functions/common_functions.stan");
    reader.add_event(3, 0, "start", "functions/common_functions.stan");
    reader.add_event(206, 203, "end", "functions/common_functions.stan");
    reader.add_event(206, 4, "restart", "model_sstap_continuous");
    reader.add_event(227, 25, "include", "data/glmer_stuff.stan");
    reader.add_event(227, 0, "start", "data/glmer_stuff.stan");
    reader.add_event(242, 15, "end", "data/glmer_stuff.stan");
    reader.add_event(242, 26, "restart", "model_sstap_continuous");
    reader.add_event(242, 26, "include", "data/glmer_stuff2.stan");
    reader.add_event(242, 0, "start", "data/glmer_stuff2.stan");
    reader.add_event(247, 5, "end", "data/glmer_stuff2.stan");
    reader.add_event(247, 27, "restart", "model_sstap_continuous");
    reader.add_event(251, 31, "include", "tdata/tdata_glmer.stan");
    reader.add_event(251, 0, "start", "tdata/tdata_glmer.stan");
    reader.add_event(266, 15, "end", "tdata/tdata_glmer.stan");
    reader.add_event(266, 32, "restart", "model_sstap_continuous");
    reader.add_event(272, 38, "include", "parameters/parameters_glmer.stan");
    reader.add_event(272, 0, "start", "parameters/parameters_glmer.stan");
    reader.add_event(277, 5, "end", "parameters/parameters_glmer.stan");
    reader.add_event(277, 39, "restart", "model_sstap_continuous");
    reader.add_event(284, 46, "include", "tparameters/tparameters_glmer.stan");
    reader.add_event(284, 0, "start", "tparameters/tparameters_glmer.stan");
    reader.add_event(305, 21, "end", "tparameters/tparameters_glmer.stan");
    reader.add_event(305, 47, "restart", "model_sstap_continuous");
    reader.add_event(346, 86, "end", "model_sstap_continuous");
    return reader;
}
template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic, 1>
make_theta_L(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& z_T, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 23;
        validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_L(len_theta_L);
        stan::math::initialize(theta_L, DUMMY_VAR__);
        stan::math::fill(theta_L, DUMMY_VAR__);
        current_statement_begin__ = 24;
        int zeta_mark(0);
        (void) zeta_mark;  // dummy to suppress unused var warning
        stan::math::fill(zeta_mark, std::numeric_limits<int>::min());
        stan::math::assign(zeta_mark,1);
        current_statement_begin__ = 25;
        int rho_mark(0);
        (void) rho_mark;  // dummy to suppress unused var warning
        stan::math::fill(rho_mark, std::numeric_limits<int>::min());
        stan::math::assign(rho_mark,1);
        current_statement_begin__ = 26;
        int z_T_mark(0);
        (void) z_T_mark;  // dummy to suppress unused var warning
        stan::math::fill(z_T_mark, std::numeric_limits<int>::min());
        stan::math::assign(z_T_mark,1);
        current_statement_begin__ = 27;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning
        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);
        current_statement_begin__ = 30;
        for (int i = 1; i <= size(p); ++i) {
            {
            current_statement_begin__ = 31;
            int nc(0);
            (void) nc;  // dummy to suppress unused var warning
            stan::math::fill(nc, std::numeric_limits<int>::min());
            stan::math::assign(nc,get_base1(p, i, "p", 1));
            current_statement_begin__ = 32;
            if (as_bool(logical_eq(nc, 1))) {
                current_statement_begin__ = 33;
                stan::model::assign(theta_L, 
                            stan::model::cons_list(stan::model::index_uni(theta_L_mark), stan::model::nil_index_list()), 
                            ((get_base1(tau, i, "tau", 1) * get_base1(scale, i, "scale", 1)) * dispersion), 
                            "assigning variable theta_L");
                current_statement_begin__ = 35;
                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
            } else {
                {
                current_statement_begin__ = 38;
                validate_non_negative_index("T_i", "nc", nc);
                validate_non_negative_index("T_i", "nc", nc);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> T_i(nc, nc);
                stan::math::initialize(T_i, DUMMY_VAR__);
                stan::math::fill(T_i, DUMMY_VAR__);
                current_statement_begin__ = 39;
                local_scalar_t__ std_dev(DUMMY_VAR__);
                (void) std_dev;  // dummy to suppress unused var warning
                stan::math::initialize(std_dev, DUMMY_VAR__);
                stan::math::fill(std_dev, DUMMY_VAR__);
                current_statement_begin__ = 40;
                local_scalar_t__ T21(DUMMY_VAR__);
                (void) T21;  // dummy to suppress unused var warning
                stan::math::initialize(T21, DUMMY_VAR__);
                stan::math::fill(T21, DUMMY_VAR__);
                current_statement_begin__ = 41;
                local_scalar_t__ trace_T_i(DUMMY_VAR__);
                (void) trace_T_i;  // dummy to suppress unused var warning
                stan::math::initialize(trace_T_i, DUMMY_VAR__);
                stan::math::fill(trace_T_i, DUMMY_VAR__);
                stan::math::assign(trace_T_i,(square(((get_base1(tau, i, "tau", 1) * get_base1(scale, i, "scale", 1)) * dispersion)) * nc));
                current_statement_begin__ = 42;
                validate_non_negative_index("pi", "nc", nc);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> pi(nc);
                stan::math::initialize(pi, DUMMY_VAR__);
                stan::math::fill(pi, DUMMY_VAR__);
                stan::math::assign(pi,segment(zeta, zeta_mark, nc));
                current_statement_begin__ = 43;
                stan::math::assign(pi, divide(pi, sum(pi)));
                current_statement_begin__ = 46;
                stan::math::assign(zeta_mark, (zeta_mark + nc));
                current_statement_begin__ = 47;
                stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi, 1, "pi", 1) * trace_T_i)));
                current_statement_begin__ = 48;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            std_dev, 
                            "assigning variable T_i");
                current_statement_begin__ = 51;
                stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi, 2, "pi", 1) * trace_T_i)));
                current_statement_begin__ = 52;
                stan::math::assign(T21, ((2.0 * get_base1(rho, rho_mark, "rho", 1)) - 1.0));
                current_statement_begin__ = 53;
                stan::math::assign(rho_mark, (rho_mark + 1));
                current_statement_begin__ = 54;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            (std_dev * stan::math::sqrt((1.0 - square(T21)))), 
                            "assigning variable T_i");
                current_statement_begin__ = 55;
                stan::model::assign(T_i, 
                            stan::model::cons_list(stan::model::index_uni(2), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            (std_dev * T21), 
                            "assigning variable T_i");
                current_statement_begin__ = 57;
                for (int r = 2; r <= (nc - 1); ++r) {
                    {
                    current_statement_begin__ = 58;
                    int rp1(0);
                    (void) rp1;  // dummy to suppress unused var warning
                    stan::math::fill(rp1, std::numeric_limits<int>::min());
                    stan::math::assign(rp1,(r + 1));
                    current_statement_begin__ = 59;
                    validate_non_negative_index("T_row", "r", r);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> T_row(r);
                    stan::math::initialize(T_row, DUMMY_VAR__);
                    stan::math::fill(T_row, DUMMY_VAR__);
                    stan::math::assign(T_row,segment(z_T, z_T_mark, r));
                    current_statement_begin__ = 60;
                    local_scalar_t__ scale_factor(DUMMY_VAR__);
                    (void) scale_factor;  // dummy to suppress unused var warning
                    stan::math::initialize(scale_factor, DUMMY_VAR__);
                    stan::math::fill(scale_factor, DUMMY_VAR__);
                    stan::math::assign(scale_factor,(stan::math::sqrt((get_base1(rho, rho_mark, "rho", 1) / dot_self(T_row))) * std_dev));
                    current_statement_begin__ = 61;
                    stan::math::assign(z_T_mark, (z_T_mark + r));
                    current_statement_begin__ = 62;
                    stan::math::assign(std_dev, stan::math::sqrt((get_base1(pi, rp1, "pi", 1) * trace_T_i)));
                    current_statement_begin__ = 63;
                    for (int c = 1; c <= r; ++c) {
                        current_statement_begin__ = 63;
                        stan::model::assign(T_i, 
                                    stan::model::cons_list(stan::model::index_uni(rp1), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    (get_base1(T_row, c, "T_row", 1) * scale_factor), 
                                    "assigning variable T_i");
                    }
                    current_statement_begin__ = 64;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(rp1), stan::model::cons_list(stan::model::index_uni(rp1), stan::model::nil_index_list())), 
                                (stan::math::sqrt((1.0 - get_base1(rho, rho_mark, "rho", 1))) * std_dev), 
                                "assigning variable T_i");
                    current_statement_begin__ = 65;
                    stan::math::assign(rho_mark, (rho_mark + 1));
                    }
                }
                current_statement_begin__ = 69;
                for (int c = 1; c <= nc; ++c) {
                    current_statement_begin__ = 69;
                    for (int r = c; r <= nc; ++r) {
                        current_statement_begin__ = 70;
                        stan::model::assign(theta_L, 
                                    stan::model::cons_list(stan::model::index_uni(theta_L_mark), stan::model::nil_index_list()), 
                                    get_base1(T_i, r, c, "T_i", 1), 
                                    "assigning variable theta_L");
                        current_statement_begin__ = 71;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 75;
        return stan::math::promote_scalar<fun_return_scalar_t__>(theta_L);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct make_theta_L_functor__ {
    template <typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T2__, T3__, T4__, T5__, typename boost::math::tools::promote_args<T6__, T7__>::type>::type, Eigen::Dynamic, 1>
    operator()(const int& len_theta_L,
                 const std::vector<int>& p,
                 const T2__& dispersion,
                 const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& tau,
                 const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& scale,
                 const Eigen::Matrix<T5__, Eigen::Dynamic, 1>& zeta,
                 const Eigen::Matrix<T6__, Eigen::Dynamic, 1>& rho,
                 const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& z_T, std::ostream* pstream__) const {
        return make_theta_L(len_theta_L, p, dispersion, tau, scale, zeta, rho, z_T, pstream__);
    }
};
template <typename T0__, typename T1__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
make_b(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 90;
        validate_non_negative_index("b", "rows(z_b)", rows(z_b));
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b(rows(z_b));
        stan::math::initialize(b, DUMMY_VAR__);
        stan::math::fill(b, DUMMY_VAR__);
        current_statement_begin__ = 91;
        int b_mark(0);
        (void) b_mark;  // dummy to suppress unused var warning
        stan::math::fill(b_mark, std::numeric_limits<int>::min());
        stan::math::assign(b_mark,1);
        current_statement_begin__ = 92;
        int theta_L_mark(0);
        (void) theta_L_mark;  // dummy to suppress unused var warning
        stan::math::fill(theta_L_mark, std::numeric_limits<int>::min());
        stan::math::assign(theta_L_mark,1);
        current_statement_begin__ = 93;
        for (int i = 1; i <= size(p); ++i) {
            {
            current_statement_begin__ = 94;
            int nc(0);
            (void) nc;  // dummy to suppress unused var warning
            stan::math::fill(nc, std::numeric_limits<int>::min());
            stan::math::assign(nc,get_base1(p, i, "p", 1));
            current_statement_begin__ = 95;
            if (as_bool(logical_eq(nc, 1))) {
                {
                current_statement_begin__ = 96;
                local_scalar_t__ theta_L_start(DUMMY_VAR__);
                (void) theta_L_start;  // dummy to suppress unused var warning
                stan::math::initialize(theta_L_start, DUMMY_VAR__);
                stan::math::fill(theta_L_start, DUMMY_VAR__);
                stan::math::assign(theta_L_start,get_base1(theta_L, theta_L_mark, "theta_L", 1));
                current_statement_begin__ = 97;
                for (int s = b_mark; s <= ((b_mark + get_base1(l, i, "l", 1)) - 1); ++s) {
                    current_statement_begin__ = 98;
                    stan::model::assign(b, 
                                stan::model::cons_list(stan::model::index_uni(s), stan::model::nil_index_list()), 
                                (theta_L_start * get_base1(z_b, s, "z_b", 1)), 
                                "assigning variable b");
                }
                current_statement_begin__ = 99;
                stan::math::assign(b_mark, (b_mark + get_base1(l, i, "l", 1)));
                current_statement_begin__ = 100;
                stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                }
            } else {
                {
                current_statement_begin__ = 103;
                validate_non_negative_index("T_i", "nc", nc);
                validate_non_negative_index("T_i", "nc", nc);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> T_i(nc, nc);
                stan::math::initialize(T_i, DUMMY_VAR__);
                stan::math::fill(T_i, DUMMY_VAR__);
                stan::math::assign(T_i,rep_matrix(0, nc, nc));
                current_statement_begin__ = 104;
                for (int c = 1; c <= nc; ++c) {
                    current_statement_begin__ = 105;
                    stan::model::assign(T_i, 
                                stan::model::cons_list(stan::model::index_uni(c), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                get_base1(theta_L, theta_L_mark, "theta_L", 1), 
                                "assigning variable T_i");
                    current_statement_begin__ = 106;
                    stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    current_statement_begin__ = 107;
                    for (int r = (c + 1); r <= nc; ++r) {
                        current_statement_begin__ = 108;
                        stan::model::assign(T_i, 
                                    stan::model::cons_list(stan::model::index_uni(r), stan::model::cons_list(stan::model::index_uni(c), stan::model::nil_index_list())), 
                                    get_base1(theta_L, theta_L_mark, "theta_L", 1), 
                                    "assigning variable T_i");
                        current_statement_begin__ = 109;
                        stan::math::assign(theta_L_mark, (theta_L_mark + 1));
                    }
                }
                current_statement_begin__ = 112;
                for (int j = 1; j <= get_base1(l, i, "l", 1); ++j) {
                    {
                    current_statement_begin__ = 113;
                    validate_non_negative_index("temp", "nc", nc);
                    Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> temp(nc);
                    stan::math::initialize(temp, DUMMY_VAR__);
                    stan::math::fill(temp, DUMMY_VAR__);
                    stan::math::assign(temp,multiply(T_i, segment(z_b, b_mark, nc)));
                    current_statement_begin__ = 114;
                    stan::math::assign(b_mark, (b_mark - 1));
                    current_statement_begin__ = 115;
                    for (int s = 1; s <= nc; ++s) {
                        current_statement_begin__ = 115;
                        stan::model::assign(b, 
                                    stan::model::cons_list(stan::model::index_uni((b_mark + s)), stan::model::nil_index_list()), 
                                    get_base1(temp, s, "temp", 1), 
                                    "assigning variable b");
                    }
                    current_statement_begin__ = 116;
                    stan::math::assign(b_mark, (b_mark + (nc + 1)));
                    }
                }
                }
            }
            }
        }
        current_statement_begin__ = 120;
        return stan::math::promote_scalar<fun_return_scalar_t__>(b);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct make_b_functor__ {
    template <typename T0__, typename T1__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& z_b,
           const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta_L,
           const std::vector<int>& p,
           const std::vector<int>& l, std::ostream* pstream__) const {
        return make_b(z_b, theta_L, p, l, pstream__);
    }
};
template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type
decov_lp(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 141;
        int pos_reg(0);
        (void) pos_reg;  // dummy to suppress unused var warning
        stan::math::fill(pos_reg, std::numeric_limits<int>::min());
        stan::math::assign(pos_reg,1);
        current_statement_begin__ = 142;
        int pos_rho(0);
        (void) pos_rho;  // dummy to suppress unused var warning
        stan::math::fill(pos_rho, std::numeric_limits<int>::min());
        stan::math::assign(pos_rho,1);
        current_statement_begin__ = 143;
        lp_accum__.add(normal_log(z_b, 0, 1));
        current_statement_begin__ = 144;
        lp_accum__.add(normal_log(z_T, 0, 1));
        current_statement_begin__ = 145;
        for (int i = 1; i <= t; ++i) {
            current_statement_begin__ = 145;
            if (as_bool(logical_gt(get_base1(p, i, "p", 1), 1))) {
                {
                current_statement_begin__ = 146;
                validate_non_negative_index("shape1", "(get_base1(p, i, \"p\", 1) - 1)", (get_base1(p, i, "p", 1) - 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> shape1((get_base1(p, i, "p", 1) - 1));
                stan::math::initialize(shape1, DUMMY_VAR__);
                stan::math::fill(shape1, DUMMY_VAR__);
                current_statement_begin__ = 147;
                validate_non_negative_index("shape2", "(get_base1(p, i, \"p\", 1) - 1)", (get_base1(p, i, "p", 1) - 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> shape2((get_base1(p, i, "p", 1) - 1));
                stan::math::initialize(shape2, DUMMY_VAR__);
                stan::math::fill(shape2, DUMMY_VAR__);
                current_statement_begin__ = 148;
                local_scalar_t__ nu(DUMMY_VAR__);
                (void) nu;  // dummy to suppress unused var warning
                stan::math::initialize(nu, DUMMY_VAR__);
                stan::math::fill(nu, DUMMY_VAR__);
                stan::math::assign(nu,(get_base1(regularization, pos_reg, "regularization", 1) + (0.5 * (get_base1(p, i, "p", 1) - 2))));
                current_statement_begin__ = 149;
                stan::math::assign(pos_reg, (pos_reg + 1));
                current_statement_begin__ = 150;
                stan::model::assign(shape1, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            nu, 
                            "assigning variable shape1");
                current_statement_begin__ = 151;
                stan::model::assign(shape2, 
                            stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                            nu, 
                            "assigning variable shape2");
                current_statement_begin__ = 152;
                for (int j = 2; j <= (get_base1(p, i, "p", 1) - 1); ++j) {
                    current_statement_begin__ = 153;
                    stan::math::assign(nu, (nu - 0.5));
                    current_statement_begin__ = 154;
                    stan::model::assign(shape1, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                (0.5 * j), 
                                "assigning variable shape1");
                    current_statement_begin__ = 155;
                    stan::model::assign(shape2, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                nu, 
                                "assigning variable shape2");
                }
                current_statement_begin__ = 157;
                lp_accum__.add(beta_log(stan::model::rvalue(rho, stan::model::cons_list(stan::model::index_min_max(pos_rho, ((pos_rho + get_base1(p, i, "p", 1)) - 2)), stan::model::nil_index_list()), "rho"), shape1, shape2));
                current_statement_begin__ = 158;
                stan::math::assign(pos_rho, (pos_rho + (get_base1(p, i, "p", 1) - 1)));
                }
            }
        }
        current_statement_begin__ = 160;
        lp_accum__.add(gamma_log(zeta, delta, 1));
        current_statement_begin__ = 161;
        lp_accum__.add(gamma_log(tau, shape, 1));
        current_statement_begin__ = 162;
        return stan::math::promote_scalar<fun_return_scalar_t__>(get_lp(lp__, lp_accum__));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct decov_lp_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__, typename T5__, typename T6__, typename T7__, typename T_lp__, typename T_lp_accum__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__, T5__, T6__, T7__, T_lp__>::type>::type
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& z_b,
             const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& z_T,
             const Eigen::Matrix<T2__, Eigen::Dynamic, 1>& rho,
             const Eigen::Matrix<T3__, Eigen::Dynamic, 1>& zeta,
             const Eigen::Matrix<T4__, Eigen::Dynamic, 1>& tau,
             const std::vector<T5__>& regularization,
             const std::vector<T6__>& delta,
             const Eigen::Matrix<T7__, Eigen::Dynamic, 1>& shape,
             const int& t,
             const std::vector<int>& p, T_lp__& lp__, T_lp_accum__& lp_accum__, std::ostream* pstream__) const {
        return decov_lp(z_b, z_T, rho, zeta, tau, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__);
    }
};
template <typename T0__, typename T1__>
typename boost::math::tools::promote_args<T0__, T1__>::type
CFt(const T0__& z,
        const T1__& df, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 177;
        local_scalar_t__ z2(DUMMY_VAR__);
        (void) z2;  // dummy to suppress unused var warning
        stan::math::initialize(z2, DUMMY_VAR__);
        stan::math::fill(z2, DUMMY_VAR__);
        stan::math::assign(z2,square(z));
        current_statement_begin__ = 178;
        local_scalar_t__ z3(DUMMY_VAR__);
        (void) z3;  // dummy to suppress unused var warning
        stan::math::initialize(z3, DUMMY_VAR__);
        stan::math::fill(z3, DUMMY_VAR__);
        stan::math::assign(z3,(z2 * z));
        current_statement_begin__ = 179;
        local_scalar_t__ z5(DUMMY_VAR__);
        (void) z5;  // dummy to suppress unused var warning
        stan::math::initialize(z5, DUMMY_VAR__);
        stan::math::fill(z5, DUMMY_VAR__);
        stan::math::assign(z5,(z2 * z3));
        current_statement_begin__ = 180;
        local_scalar_t__ z7(DUMMY_VAR__);
        (void) z7;  // dummy to suppress unused var warning
        stan::math::initialize(z7, DUMMY_VAR__);
        stan::math::fill(z7, DUMMY_VAR__);
        stan::math::assign(z7,(z2 * z5));
        current_statement_begin__ = 181;
        local_scalar_t__ z9(DUMMY_VAR__);
        (void) z9;  // dummy to suppress unused var warning
        stan::math::initialize(z9, DUMMY_VAR__);
        stan::math::fill(z9, DUMMY_VAR__);
        stan::math::assign(z9,(z2 * z7));
        current_statement_begin__ = 182;
        local_scalar_t__ df2(DUMMY_VAR__);
        (void) df2;  // dummy to suppress unused var warning
        stan::math::initialize(df2, DUMMY_VAR__);
        stan::math::fill(df2, DUMMY_VAR__);
        stan::math::assign(df2,square(df));
        current_statement_begin__ = 183;
        local_scalar_t__ df3(DUMMY_VAR__);
        (void) df3;  // dummy to suppress unused var warning
        stan::math::initialize(df3, DUMMY_VAR__);
        stan::math::fill(df3, DUMMY_VAR__);
        stan::math::assign(df3,(df2 * df));
        current_statement_begin__ = 184;
        local_scalar_t__ df4(DUMMY_VAR__);
        (void) df4;  // dummy to suppress unused var warning
        stan::math::initialize(df4, DUMMY_VAR__);
        stan::math::fill(df4, DUMMY_VAR__);
        stan::math::assign(df4,(df2 * df2));
        current_statement_begin__ = 185;
        return stan::math::promote_scalar<fun_return_scalar_t__>(((((z + ((z3 + z) / (4 * df))) + ((((5 * z5) + (16 * z3)) + (3 * z)) / (96 * df2))) + (((((3 * z7) + (19 * z5)) + (17 * z3)) - (15 * z)) / (384 * df3))) + ((((((79 * z9) + (776 * z7)) + (1482 * z5)) - (1920 * z3)) - (945 * z)) / (92160 * df4))));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct CFt_functor__ {
    template <typename T0__, typename T1__>
        typename boost::math::tools::promote_args<T0__, T1__>::type
    operator()(const T0__& z,
        const T1__& df, std::ostream* pstream__) const {
        return CFt(z, df, pstream__);
    }
};
std::vector<std::vector<int> >
make_V(const int& N,
           const int& t,
           const std::vector<int>& v, std::ostream* pstream__) {
    typedef double local_scalar_t__;
    typedef int fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 199;
        validate_non_negative_index("V", "t", t);
        validate_non_negative_index("V", "N", N);
        std::vector<std::vector<int  >  > V(t, std::vector<int>(N, int(0)));
        stan::math::fill(V, std::numeric_limits<int>::min());
        current_statement_begin__ = 200;
        int pos(0);
        (void) pos;  // dummy to suppress unused var warning
        stan::math::fill(pos, std::numeric_limits<int>::min());
        stan::math::assign(pos,1);
        current_statement_begin__ = 201;
        if (as_bool(logical_gt(t, 0))) {
            current_statement_begin__ = 201;
            for (int j = 1; j <= N; ++j) {
                current_statement_begin__ = 201;
                for (int i = 1; i <= t; ++i) {
                    current_statement_begin__ = 202;
                    stan::model::assign(V, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (get_base1(v, pos, "v", 1) + 1), 
                                "assigning variable V");
                    current_statement_begin__ = 203;
                    stan::math::assign(pos, (pos + 1));
                }
            }
        }
        current_statement_begin__ = 205;
        return stan::math::promote_scalar<fun_return_scalar_t__>(V);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}
struct make_V_functor__ {
            std::vector<std::vector<int> >
    operator()(const int& N,
           const int& t,
           const std::vector<int>& v, std::ostream* pstream__) const {
        return make_V(N, t, v, pstream__);
    }
};
#include <stan_meta_header.hpp>
class model_sstap_continuous
  : public stan::model::model_base_crtp<model_sstap_continuous> {
private:
        int N;
        int ncol_Z;
        int ncol_smooth;
        int K_smooth;
        int num_stap;
        std::vector<int> stap_lengths;
        std::vector<int> stap_penalties;
        int num_stap_penalties;
        std::vector<std::vector<int> > stap_pen_map;
        std::vector<std::vector<int> > pen_ix;
        std::vector<std::vector<int> > beta_ix;
        int P;
        vector_d y;
        matrix_d Q;
        matrix_d R_inv;
        matrix_d S;
        int t;
        std::vector<int> p;
        std::vector<int> l;
        int q;
        int len_theta_L;
        vector_d shape;
        vector_d scale;
        int len_concentration;
        std::vector<double> concentration;
        int len_regularization;
        std::vector<double> regularization;
        int num_non_zero;
        vector_d w;
        std::vector<int> v;
        std::vector<int> u;
        int special_case;
        std::vector<std::vector<int> > V;
        int len_z_T;
        int len_var_group;
        int len_rho;
        int pos;
        std::vector<double> delta;
public:
    model_sstap_continuous(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_sstap_continuous(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_sstap_continuous_namespace::model_sstap_continuous";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 210;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 211;
            context__.validate_dims("data initialization", "ncol_Z", "int", context__.to_vec());
            ncol_Z = int(0);
            vals_i__ = context__.vals_i("ncol_Z");
            pos__ = 0;
            ncol_Z = vals_i__[pos__++];
            check_greater_or_equal(function__, "ncol_Z", ncol_Z, 1);
            current_statement_begin__ = 212;
            context__.validate_dims("data initialization", "ncol_smooth", "int", context__.to_vec());
            ncol_smooth = int(0);
            vals_i__ = context__.vals_i("ncol_smooth");
            pos__ = 0;
            ncol_smooth = vals_i__[pos__++];
            check_greater_or_equal(function__, "ncol_smooth", ncol_smooth, 1);
            current_statement_begin__ = 213;
            context__.validate_dims("data initialization", "K_smooth", "int", context__.to_vec());
            K_smooth = int(0);
            vals_i__ = context__.vals_i("K_smooth");
            pos__ = 0;
            K_smooth = vals_i__[pos__++];
            check_greater_or_equal(function__, "K_smooth", K_smooth, 1);
            current_statement_begin__ = 214;
            context__.validate_dims("data initialization", "num_stap", "int", context__.to_vec());
            num_stap = int(0);
            vals_i__ = context__.vals_i("num_stap");
            pos__ = 0;
            num_stap = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_stap", num_stap, 1);
            current_statement_begin__ = 215;
            validate_non_negative_index("stap_lengths", "num_stap", num_stap);
            context__.validate_dims("data initialization", "stap_lengths", "int", context__.to_vec(num_stap));
            stap_lengths = std::vector<int>(num_stap, int(0));
            vals_i__ = context__.vals_i("stap_lengths");
            pos__ = 0;
            size_t stap_lengths_k_0_max__ = num_stap;
            for (size_t k_0__ = 0; k_0__ < stap_lengths_k_0_max__; ++k_0__) {
                stap_lengths[k_0__] = vals_i__[pos__++];
            }
            size_t stap_lengths_i_0_max__ = num_stap;
            for (size_t i_0__ = 0; i_0__ < stap_lengths_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "stap_lengths[i_0__]", stap_lengths[i_0__], 1);
            }
            current_statement_begin__ = 216;
            validate_non_negative_index("stap_penalties", "num_stap", num_stap);
            context__.validate_dims("data initialization", "stap_penalties", "int", context__.to_vec(num_stap));
            stap_penalties = std::vector<int>(num_stap, int(0));
            vals_i__ = context__.vals_i("stap_penalties");
            pos__ = 0;
            size_t stap_penalties_k_0_max__ = num_stap;
            for (size_t k_0__ = 0; k_0__ < stap_penalties_k_0_max__; ++k_0__) {
                stap_penalties[k_0__] = vals_i__[pos__++];
            }
            size_t stap_penalties_i_0_max__ = num_stap;
            for (size_t i_0__ = 0; i_0__ < stap_penalties_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "stap_penalties[i_0__]", stap_penalties[i_0__], 1);
            }
            current_statement_begin__ = 217;
            context__.validate_dims("data initialization", "num_stap_penalties", "int", context__.to_vec());
            num_stap_penalties = int(0);
            vals_i__ = context__.vals_i("num_stap_penalties");
            pos__ = 0;
            num_stap_penalties = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_stap_penalties", num_stap_penalties, 1);
            current_statement_begin__ = 218;
            validate_non_negative_index("stap_pen_map", "num_stap", num_stap);
            validate_non_negative_index("stap_pen_map", "max(stap_penalties)", max(stap_penalties));
            context__.validate_dims("data initialization", "stap_pen_map", "int", context__.to_vec(num_stap,max(stap_penalties)));
            stap_pen_map = std::vector<std::vector<int> >(num_stap, std::vector<int>(max(stap_penalties), int(0)));
            vals_i__ = context__.vals_i("stap_pen_map");
            pos__ = 0;
            size_t stap_pen_map_k_0_max__ = num_stap;
            size_t stap_pen_map_k_1_max__ = max(stap_penalties);
            for (size_t k_1__ = 0; k_1__ < stap_pen_map_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < stap_pen_map_k_0_max__; ++k_0__) {
                    stap_pen_map[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t stap_pen_map_i_0_max__ = num_stap;
            size_t stap_pen_map_i_1_max__ = max(stap_penalties);
            for (size_t i_0__ = 0; i_0__ < stap_pen_map_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < stap_pen_map_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "stap_pen_map[i_0__][i_1__]", stap_pen_map[i_0__][i_1__], 0);
                }
            }
            current_statement_begin__ = 219;
            validate_non_negative_index("pen_ix", "num_stap_penalties", num_stap_penalties);
            validate_non_negative_index("pen_ix", "2", 2);
            context__.validate_dims("data initialization", "pen_ix", "int", context__.to_vec(num_stap_penalties,2));
            pen_ix = std::vector<std::vector<int> >(num_stap_penalties, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("pen_ix");
            pos__ = 0;
            size_t pen_ix_k_0_max__ = num_stap_penalties;
            size_t pen_ix_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < pen_ix_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < pen_ix_k_0_max__; ++k_0__) {
                    pen_ix[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t pen_ix_i_0_max__ = num_stap_penalties;
            size_t pen_ix_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < pen_ix_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < pen_ix_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "pen_ix[i_0__][i_1__]", pen_ix[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 220;
            validate_non_negative_index("beta_ix", "num_stap", num_stap);
            validate_non_negative_index("beta_ix", "2", 2);
            context__.validate_dims("data initialization", "beta_ix", "int", context__.to_vec(num_stap,2));
            beta_ix = std::vector<std::vector<int> >(num_stap, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("beta_ix");
            pos__ = 0;
            size_t beta_ix_k_0_max__ = num_stap;
            size_t beta_ix_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < beta_ix_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_ix_k_0_max__; ++k_0__) {
                    beta_ix[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t beta_ix_i_0_max__ = num_stap;
            size_t beta_ix_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < beta_ix_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < beta_ix_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "beta_ix[i_0__][i_1__]", beta_ix[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 221;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 1);
            current_statement_begin__ = 222;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 223;
            validate_non_negative_index("Q", "N", N);
            validate_non_negative_index("Q", "P", P);
            context__.validate_dims("data initialization", "Q", "matrix_d", context__.to_vec(N,P));
            Q = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P);
            vals_r__ = context__.vals_r("Q");
            pos__ = 0;
            size_t Q_j_2_max__ = P;
            size_t Q_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < Q_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Q_j_1_max__; ++j_1__) {
                    Q(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 224;
            validate_non_negative_index("R_inv", "P", P);
            validate_non_negative_index("R_inv", "P", P);
            context__.validate_dims("data initialization", "R_inv", "matrix_d", context__.to_vec(P,P));
            R_inv = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(P, P);
            vals_r__ = context__.vals_r("R_inv");
            pos__ = 0;
            size_t R_inv_j_2_max__ = P;
            size_t R_inv_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < R_inv_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < R_inv_j_1_max__; ++j_1__) {
                    R_inv(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 225;
            validate_non_negative_index("S", "ncol_smooth", ncol_smooth);
            validate_non_negative_index("S", "K_smooth", K_smooth);
            context__.validate_dims("data initialization", "S", "matrix_d", context__.to_vec(ncol_smooth,K_smooth));
            S = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(ncol_smooth, K_smooth);
            vals_r__ = context__.vals_r("S");
            pos__ = 0;
            size_t S_j_2_max__ = K_smooth;
            size_t S_j_1_max__ = ncol_smooth;
            for (size_t j_2__ = 0; j_2__ < S_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                    S(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 230;
            context__.validate_dims("data initialization", "t", "int", context__.to_vec());
            t = int(0);
            vals_i__ = context__.vals_i("t");
            pos__ = 0;
            t = vals_i__[pos__++];
            check_greater_or_equal(function__, "t", t, 0);
            current_statement_begin__ = 231;
            validate_non_negative_index("p", "t", t);
            context__.validate_dims("data initialization", "p", "int", context__.to_vec(t));
            p = std::vector<int>(t, int(0));
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            size_t p_k_0_max__ = t;
            for (size_t k_0__ = 0; k_0__ < p_k_0_max__; ++k_0__) {
                p[k_0__] = vals_i__[pos__++];
            }
            size_t p_i_0_max__ = t;
            for (size_t i_0__ = 0; i_0__ < p_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "p[i_0__]", p[i_0__], 1);
            }
            current_statement_begin__ = 232;
            validate_non_negative_index("l", "t", t);
            context__.validate_dims("data initialization", "l", "int", context__.to_vec(t));
            l = std::vector<int>(t, int(0));
            vals_i__ = context__.vals_i("l");
            pos__ = 0;
            size_t l_k_0_max__ = t;
            for (size_t k_0__ = 0; k_0__ < l_k_0_max__; ++k_0__) {
                l[k_0__] = vals_i__[pos__++];
            }
            size_t l_i_0_max__ = t;
            for (size_t i_0__ = 0; i_0__ < l_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "l[i_0__]", l[i_0__], 1);
            }
            current_statement_begin__ = 233;
            context__.validate_dims("data initialization", "q", "int", context__.to_vec());
            q = int(0);
            vals_i__ = context__.vals_i("q");
            pos__ = 0;
            q = vals_i__[pos__++];
            check_greater_or_equal(function__, "q", q, 0);
            current_statement_begin__ = 234;
            context__.validate_dims("data initialization", "len_theta_L", "int", context__.to_vec());
            len_theta_L = int(0);
            vals_i__ = context__.vals_i("len_theta_L");
            pos__ = 0;
            len_theta_L = vals_i__[pos__++];
            check_greater_or_equal(function__, "len_theta_L", len_theta_L, 0);
            current_statement_begin__ = 237;
            validate_non_negative_index("shape", "t", t);
            context__.validate_dims("data initialization", "shape", "vector_d", context__.to_vec(t));
            shape = Eigen::Matrix<double, Eigen::Dynamic, 1>(t);
            vals_r__ = context__.vals_r("shape");
            pos__ = 0;
            size_t shape_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < shape_j_1_max__; ++j_1__) {
                shape(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "shape", shape, 0);
            current_statement_begin__ = 238;
            validate_non_negative_index("scale", "t", t);
            context__.validate_dims("data initialization", "scale", "vector_d", context__.to_vec(t));
            scale = Eigen::Matrix<double, Eigen::Dynamic, 1>(t);
            vals_r__ = context__.vals_r("scale");
            pos__ = 0;
            size_t scale_j_1_max__ = t;
            for (size_t j_1__ = 0; j_1__ < scale_j_1_max__; ++j_1__) {
                scale(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "scale", scale, 0);
            current_statement_begin__ = 239;
            context__.validate_dims("data initialization", "len_concentration", "int", context__.to_vec());
            len_concentration = int(0);
            vals_i__ = context__.vals_i("len_concentration");
            pos__ = 0;
            len_concentration = vals_i__[pos__++];
            check_greater_or_equal(function__, "len_concentration", len_concentration, 0);
            current_statement_begin__ = 240;
            validate_non_negative_index("concentration", "len_concentration", len_concentration);
            context__.validate_dims("data initialization", "concentration", "double", context__.to_vec(len_concentration));
            concentration = std::vector<double>(len_concentration, double(0));
            vals_r__ = context__.vals_r("concentration");
            pos__ = 0;
            size_t concentration_k_0_max__ = len_concentration;
            for (size_t k_0__ = 0; k_0__ < concentration_k_0_max__; ++k_0__) {
                concentration[k_0__] = vals_r__[pos__++];
            }
            size_t concentration_i_0_max__ = len_concentration;
            for (size_t i_0__ = 0; i_0__ < concentration_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "concentration[i_0__]", concentration[i_0__], 0);
            }
            current_statement_begin__ = 241;
            context__.validate_dims("data initialization", "len_regularization", "int", context__.to_vec());
            len_regularization = int(0);
            vals_i__ = context__.vals_i("len_regularization");
            pos__ = 0;
            len_regularization = vals_i__[pos__++];
            check_greater_or_equal(function__, "len_regularization", len_regularization, 0);
            current_statement_begin__ = 242;
            validate_non_negative_index("regularization", "len_regularization", len_regularization);
            context__.validate_dims("data initialization", "regularization", "double", context__.to_vec(len_regularization));
            regularization = std::vector<double>(len_regularization, double(0));
            vals_r__ = context__.vals_r("regularization");
            pos__ = 0;
            size_t regularization_k_0_max__ = len_regularization;
            for (size_t k_0__ = 0; k_0__ < regularization_k_0_max__; ++k_0__) {
                regularization[k_0__] = vals_r__[pos__++];
            }
            size_t regularization_i_0_max__ = len_regularization;
            for (size_t i_0__ = 0; i_0__ < regularization_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "regularization[i_0__]", regularization[i_0__], 0);
            }
            current_statement_begin__ = 243;
            context__.validate_dims("data initialization", "num_non_zero", "int", context__.to_vec());
            num_non_zero = int(0);
            vals_i__ = context__.vals_i("num_non_zero");
            pos__ = 0;
            num_non_zero = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_non_zero", num_non_zero, 0);
            current_statement_begin__ = 244;
            validate_non_negative_index("w", "num_non_zero", num_non_zero);
            context__.validate_dims("data initialization", "w", "vector_d", context__.to_vec(num_non_zero));
            w = Eigen::Matrix<double, Eigen::Dynamic, 1>(num_non_zero);
            vals_r__ = context__.vals_r("w");
            pos__ = 0;
            size_t w_j_1_max__ = num_non_zero;
            for (size_t j_1__ = 0; j_1__ < w_j_1_max__; ++j_1__) {
                w(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 245;
            validate_non_negative_index("v", "num_non_zero", num_non_zero);
            context__.validate_dims("data initialization", "v", "int", context__.to_vec(num_non_zero));
            v = std::vector<int>(num_non_zero, int(0));
            vals_i__ = context__.vals_i("v");
            pos__ = 0;
            size_t v_k_0_max__ = num_non_zero;
            for (size_t k_0__ = 0; k_0__ < v_k_0_max__; ++k_0__) {
                v[k_0__] = vals_i__[pos__++];
            }
            size_t v_i_0_max__ = num_non_zero;
            for (size_t i_0__ = 0; i_0__ < v_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "v[i_0__]", v[i_0__], 0);
                check_less_or_equal(function__, "v[i_0__]", v[i_0__], (q - 1));
            }
            current_statement_begin__ = 246;
            validate_non_negative_index("u", "(logical_gt(t, 0) ? (N + 1) : 0 )", (logical_gt(t, 0) ? (N + 1) : 0 ));
            context__.validate_dims("data initialization", "u", "int", context__.to_vec((logical_gt(t, 0) ? (N + 1) : 0 )));
            u = std::vector<int>((logical_gt(t, 0) ? (N + 1) : 0 ), int(0));
            vals_i__ = context__.vals_i("u");
            pos__ = 0;
            size_t u_k_0_max__ = (logical_gt(t, 0) ? (N + 1) : 0 );
            for (size_t k_0__ = 0; k_0__ < u_k_0_max__; ++k_0__) {
                u[k_0__] = vals_i__[pos__++];
            }
            size_t u_i_0_max__ = (logical_gt(t, 0) ? (N + 1) : 0 );
            for (size_t i_0__ = 0; i_0__ < u_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "u[i_0__]", u[i_0__], 0);
                check_less_or_equal(function__, "u[i_0__]", u[i_0__], (rows(w) + 1));
            }
            current_statement_begin__ = 247;
            context__.validate_dims("data initialization", "special_case", "int", context__.to_vec());
            special_case = int(0);
            vals_i__ = context__.vals_i("special_case");
            pos__ = 0;
            special_case = vals_i__[pos__++];
            check_greater_or_equal(function__, "special_case", special_case, 0);
            check_less_or_equal(function__, "special_case", special_case, 1);
            // initialize transformed data variables
            current_statement_begin__ = 251;
            validate_non_negative_index("V", "(special_case ? t : 0 )", (special_case ? t : 0 ));
            validate_non_negative_index("V", "N", N);
            V = std::vector<std::vector<int> >((special_case ? t : 0 ), std::vector<int>(N, int(0)));
            stan::math::fill(V, std::numeric_limits<int>::min());
            stan::math::assign(V,make_V(N, (special_case ? t : 0 ), v, pstream__));
            current_statement_begin__ = 252;
            len_z_T = int(0);
            stan::math::fill(len_z_T, std::numeric_limits<int>::min());
            stan::math::assign(len_z_T,0);
            current_statement_begin__ = 253;
            len_var_group = int(0);
            stan::math::fill(len_var_group, std::numeric_limits<int>::min());
            stan::math::assign(len_var_group,(sum(p) * logical_gt(t, 0)));
            current_statement_begin__ = 254;
            len_rho = int(0);
            stan::math::fill(len_rho, std::numeric_limits<int>::min());
            stan::math::assign(len_rho,(sum(p) - t));
            current_statement_begin__ = 255;
            pos = int(0);
            stan::math::fill(pos, std::numeric_limits<int>::min());
            stan::math::assign(pos,1);
            current_statement_begin__ = 256;
            validate_non_negative_index("delta", "len_concentration", len_concentration);
            delta = std::vector<double>(len_concentration, double(0));
            stan::math::fill(delta, DUMMY_VAR__);
            // execute transformed data statements
            current_statement_begin__ = 258;
            for (int i = 1; i <= t; ++i) {
                current_statement_begin__ = 259;
                if (as_bool(logical_gt(get_base1(p, i, "p", 1), 1))) {
                    current_statement_begin__ = 260;
                    for (int j = 1; j <= get_base1(p, i, "p", 1); ++j) {
                        current_statement_begin__ = 261;
                        stan::model::assign(delta, 
                                    stan::model::cons_list(stan::model::index_uni(pos), stan::model::nil_index_list()), 
                                    get_base1(concentration, j, "concentration", 1), 
                                    "assigning variable delta");
                        current_statement_begin__ = 262;
                        stan::math::assign(pos, (pos + 1));
                    }
                }
                current_statement_begin__ = 265;
                for (int j = 3; j <= get_base1(p, i, "p", 1); ++j) {
                    current_statement_begin__ = 265;
                    stan::math::assign(len_z_T, (len_z_T + (get_base1(p, i, "p", 1) - 1)));
                }
            }
            // validate transformed data
            current_statement_begin__ = 251;
            size_t V_i_0_max__ = (special_case ? t : 0 );
            size_t V_i_1_max__ = N;
            for (size_t i_0__ = 0; i_0__ < V_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < V_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "V[i_0__][i_1__]", V[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 252;
            check_greater_or_equal(function__, "len_z_T", len_z_T, 0);
            current_statement_begin__ = 253;
            check_greater_or_equal(function__, "len_var_group", len_var_group, 0);
            current_statement_begin__ = 254;
            check_greater_or_equal(function__, "len_rho", len_rho, 0);
            current_statement_begin__ = 255;
            check_greater_or_equal(function__, "pos", pos, 1);
            current_statement_begin__ = 256;
            size_t delta_i_0_max__ = len_concentration;
            for (size_t i_0__ = 0; i_0__ < delta_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "delta[i_0__]", delta[i_0__], 0);
            }
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 269;
            validate_non_negative_index("beta_tilde", "P", P);
            num_params_r__ += P;
            current_statement_begin__ = 270;
            validate_non_negative_index("tau", "num_stap_penalties", num_stap_penalties);
            num_params_r__ += num_stap_penalties;
            current_statement_begin__ = 271;
            num_params_r__ += 1;
            current_statement_begin__ = 273;
            validate_non_negative_index("z_b", "q", q);
            num_params_r__ += q;
            current_statement_begin__ = 274;
            validate_non_negative_index("z_T", "len_z_T", len_z_T);
            num_params_r__ += len_z_T;
            current_statement_begin__ = 275;
            validate_non_negative_index("rho", "len_rho", len_rho);
            num_params_r__ += len_rho;
            current_statement_begin__ = 276;
            validate_non_negative_index("zeta", "len_concentration", len_concentration);
            num_params_r__ += len_concentration;
            current_statement_begin__ = 277;
            validate_non_negative_index("tau_b", "t", t);
            num_params_r__ += t;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_sstap_continuous() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 269;
        if (!(context__.contains_r("beta_tilde")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_tilde missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_tilde");
        pos__ = 0U;
        validate_non_negative_index("beta_tilde", "P", P);
        context__.validate_dims("parameter initialization", "beta_tilde", "vector_d", context__.to_vec(P));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_tilde(P);
        size_t beta_tilde_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            beta_tilde(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_tilde);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_tilde: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 270;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "num_stap_penalties", num_stap_penalties);
        context__.validate_dims("parameter initialization", "tau", "vector_d", context__.to_vec(num_stap_penalties));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau(num_stap_penalties);
        size_t tau_j_1_max__ = num_stap_penalties;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            tau(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 271;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 273;
        if (!(context__.contains_r("z_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_b");
        pos__ = 0U;
        validate_non_negative_index("z_b", "q", q);
        context__.validate_dims("parameter initialization", "z_b", "vector_d", context__.to_vec(q));
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_b(q);
        size_t z_b_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < z_b_j_1_max__; ++j_1__) {
            z_b(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(z_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 274;
        if (!(context__.contains_r("z_T")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable z_T missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("z_T");
        pos__ = 0U;
        validate_non_negative_index("z_T", "len_z_T", len_z_T);
        context__.validate_dims("parameter initialization", "z_T", "vector_d", context__.to_vec(len_z_T));
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_T(len_z_T);
        size_t z_T_j_1_max__ = len_z_T;
        for (size_t j_1__ = 0; j_1__ < z_T_j_1_max__; ++j_1__) {
            z_T(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(z_T);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable z_T: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 275;
        if (!(context__.contains_r("rho")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable rho missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("rho");
        pos__ = 0U;
        validate_non_negative_index("rho", "len_rho", len_rho);
        context__.validate_dims("parameter initialization", "rho", "vector_d", context__.to_vec(len_rho));
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho(len_rho);
        size_t rho_j_1_max__ = len_rho;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            rho(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, 1, rho);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable rho: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 276;
        if (!(context__.contains_r("zeta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable zeta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("zeta");
        pos__ = 0U;
        validate_non_negative_index("zeta", "len_concentration", len_concentration);
        context__.validate_dims("parameter initialization", "zeta", "vector_d", context__.to_vec(len_concentration));
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta(len_concentration);
        size_t zeta_j_1_max__ = len_concentration;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            zeta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, zeta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable zeta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 277;
        if (!(context__.contains_r("tau_b")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau_b missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau_b");
        pos__ = 0U;
        validate_non_negative_index("tau_b", "t", t);
        context__.validate_dims("parameter initialization", "tau_b", "vector_d", context__.to_vec(t));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_b(t);
        size_t tau_b_j_1_max__ = t;
        for (size_t j_1__ = 0; j_1__ < tau_b_j_1_max__; ++j_1__) {
            tau_b(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau_b);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau_b: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 269;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_tilde;
            (void) beta_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_tilde = in__.vector_constrain(P, lp__);
            else
                beta_tilde = in__.vector_constrain(P);
            current_statement_begin__ = 270;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.vector_lb_constrain(0, num_stap_penalties, lp__);
            else
                tau = in__.vector_lb_constrain(0, num_stap_penalties);
            current_statement_begin__ = 271;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 273;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z_b;
            (void) z_b;  // dummy to suppress unused var warning
            if (jacobian__)
                z_b = in__.vector_constrain(q, lp__);
            else
                z_b = in__.vector_constrain(q);
            current_statement_begin__ = 274;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> z_T;
            (void) z_T;  // dummy to suppress unused var warning
            if (jacobian__)
                z_T = in__.vector_constrain(len_z_T, lp__);
            else
                z_T = in__.vector_constrain(len_z_T);
            current_statement_begin__ = 275;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> rho;
            (void) rho;  // dummy to suppress unused var warning
            if (jacobian__)
                rho = in__.vector_lub_constrain(0, 1, len_rho, lp__);
            else
                rho = in__.vector_lub_constrain(0, 1, len_rho);
            current_statement_begin__ = 276;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> zeta;
            (void) zeta;  // dummy to suppress unused var warning
            if (jacobian__)
                zeta = in__.vector_lb_constrain(0, len_concentration, lp__);
            else
                zeta = in__.vector_lb_constrain(0, len_concentration);
            current_statement_begin__ = 277;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau_b;
            (void) tau_b;  // dummy to suppress unused var warning
            if (jacobian__)
                tau_b = in__.vector_lb_constrain(0, t, lp__);
            else
                tau_b = in__.vector_lb_constrain(0, t);
            // transformed parameters
            current_statement_begin__ = 280;
            validate_non_negative_index("beta", "P", P);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(P);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            stan::math::assign(beta,multiply(R_inv, beta_tilde));
            current_statement_begin__ = 281;
            validate_non_negative_index("sstap_beta", "ncol_smooth", ncol_smooth);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sstap_beta(ncol_smooth);
            stan::math::initialize(sstap_beta, DUMMY_VAR__);
            stan::math::fill(sstap_beta, DUMMY_VAR__);
            stan::math::assign(sstap_beta,stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_min_max((ncol_Z + 1), P), stan::model::nil_index_list()), "beta"));
            current_statement_begin__ = 282;
            validate_non_negative_index("eta", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> eta(N);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 286;
            validate_non_negative_index("b", "q", q);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b(q);
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 287;
            validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> theta_L(len_theta_L);
            stan::math::initialize(theta_L, DUMMY_VAR__);
            stan::math::fill(theta_L, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 289;
            if (as_bool(logical_gt(t, 0))) {
                current_statement_begin__ = 290;
                if (as_bool(logical_eq(special_case, 1))) {
                    {
                    current_statement_begin__ = 291;
                    int start(0);
                    (void) start;  // dummy to suppress unused var warning
                    stan::math::fill(start, std::numeric_limits<int>::min());
                    stan::math::assign(start,1);
                    current_statement_begin__ = 292;
                    stan::math::assign(theta_L, multiply(elt_multiply(scale, tau_b), sigma));
                    current_statement_begin__ = 293;
                    if (as_bool(logical_eq(t, 1))) {
                        current_statement_begin__ = 293;
                        stan::math::assign(b, multiply(get_base1(theta_L, 1, "theta_L", 1), z_b));
                    } else {
                        current_statement_begin__ = 294;
                        for (int i = 1; i <= t; ++i) {
                            {
                            current_statement_begin__ = 295;
                            int end(0);
                            (void) end;  // dummy to suppress unused var warning
                            stan::math::fill(end, std::numeric_limits<int>::min());
                            stan::math::assign(end,((start + get_base1(l, i, "l", 1)) - 1));
                            current_statement_begin__ = 296;
                            stan::model::assign(b, 
                                        stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), 
                                        multiply(get_base1(theta_L, i, "theta_L", 1), stan::model::rvalue(z_b, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "z_b")), 
                                        "assigning variable b");
                            current_statement_begin__ = 297;
                            stan::math::assign(start, (end + 1));
                            }
                        }
                    }
                    }
                } else {
                    current_statement_begin__ = 301;
                    stan::math::assign(theta_L, make_theta_L(len_theta_L, p, sigma, tau_b, scale, zeta, rho, z_T, pstream__));
                    current_statement_begin__ = 303;
                    stan::math::assign(b, make_b(z_b, theta_L, p, l, pstream__));
                }
            }
            current_statement_begin__ = 308;
            stan::math::assign(eta, multiply(Q, beta_tilde));
            current_statement_begin__ = 310;
            if (as_bool(logical_gt(t, 0))) {
                current_statement_begin__ = 311;
                if (as_bool(special_case)) {
                    current_statement_begin__ = 311;
                    for (int i = 1; i <= t; ++i) {
                        current_statement_begin__ = 311;
                        stan::math::assign(eta, add(eta, stan::model::rvalue(b, stan::model::cons_list(stan::model::index_multi(get_base1(V, i, "V", 1)), stan::model::nil_index_list()), "b")));
                    }
                } else {
                    current_statement_begin__ = 312;
                    stan::math::assign(eta, add(eta, csr_matrix_times_vector(N, q, w, v, u, b)));
                }
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 280;
            size_t beta_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 281;
            size_t sstap_beta_j_1_max__ = ncol_smooth;
            for (size_t j_1__ = 0; j_1__ < sstap_beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sstap_beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sstap_beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sstap_beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 282;
            size_t eta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(eta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: eta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 286;
            size_t b_j_1_max__ = q;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(b(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: b" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 287;
            size_t theta_L_j_1_max__ = len_theta_L;
            for (size_t j_1__ = 0; j_1__ < theta_L_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(theta_L(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_L" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta_L: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 319;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 5));
            current_statement_begin__ = 320;
            lp_accum__.add(exponential_log<propto__>(tau, 1));
            current_statement_begin__ = 321;
            lp_accum__.add(normal_log<propto__>(y, eta, sigma));
            current_statement_begin__ = 325;
            for (int i = 1; i <= num_stap; ++i) {
                {
                current_statement_begin__ = 326;
                validate_non_negative_index("K", "get_base1(stap_lengths, i, \"stap_lengths\", 1)", get_base1(stap_lengths, i, "stap_lengths", 1));
                validate_non_negative_index("K", "get_base1(stap_lengths, i, \"stap_lengths\", 1)", get_base1(stap_lengths, i, "stap_lengths", 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(get_base1(stap_lengths, i, "stap_lengths", 1), get_base1(stap_lengths, i, "stap_lengths", 1));
                stan::math::initialize(K, DUMMY_VAR__);
                stan::math::fill(K, DUMMY_VAR__);
                stan::math::assign(K,rep_matrix(0, get_base1(stap_lengths, i, "stap_lengths", 1), get_base1(stap_lengths, i, "stap_lengths", 1)));
                current_statement_begin__ = 327;
                for (int j = 1; j <= get_base1(stap_penalties, i, "stap_penalties", 1); ++j) {
                    {
                    current_statement_begin__ = 328;
                    int pen_mapper(0);
                    (void) pen_mapper;  // dummy to suppress unused var warning
                    stan::math::fill(pen_mapper, std::numeric_limits<int>::min());
                    stan::math::assign(pen_mapper,get_base1(get_base1(stap_pen_map, i, "stap_pen_map", 1), j, "stap_pen_map", 2));
                    current_statement_begin__ = 329;
                    stan::math::assign(K, add(K, multiply(stan::model::rvalue(S, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(beta_ix, i, "beta_ix", 1), 1, "beta_ix", 2), get_base1(get_base1(beta_ix, i, "beta_ix", 1), 2, "beta_ix", 2)), stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(pen_ix, pen_mapper, "pen_ix", 1), 1, "pen_ix", 2), get_base1(get_base1(pen_ix, pen_mapper, "pen_ix", 1), 2, "pen_ix", 2)), stan::model::nil_index_list())), "S"), get_base1(tau, pen_mapper, "tau", 1))));
                    }
                }
                current_statement_begin__ = 331;
                lp_accum__.add(multi_normal_prec_log(stan::model::rvalue(sstap_beta, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(beta_ix, i, "beta_ix", 1), 1, "beta_ix", 2), get_base1(get_base1(beta_ix, i, "beta_ix", 1), 2, "beta_ix", 2)), stan::model::nil_index_list()), "sstap_beta"), rep_vector(0, get_base1(stap_lengths, i, "stap_lengths", 1)), K));
                }
            }
            current_statement_begin__ = 334;
            if (as_bool(logical_gt(t, 0))) {
                {
                current_statement_begin__ = 335;
                local_scalar_t__ dummy(DUMMY_VAR__);
                (void) dummy;  // dummy to suppress unused var warning
                stan::math::initialize(dummy, DUMMY_VAR__);
                stan::math::fill(dummy, DUMMY_VAR__);
                stan::math::assign(dummy,decov_lp(z_b, z_T, rho, zeta, tau_b, regularization, delta, shape, t, p, lp__, lp_accum__, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_tilde");
        names__.push_back("tau");
        names__.push_back("sigma");
        names__.push_back("z_b");
        names__.push_back("z_T");
        names__.push_back("rho");
        names__.push_back("zeta");
        names__.push_back("tau_b");
        names__.push_back("beta");
        names__.push_back("sstap_beta");
        names__.push_back("eta");
        names__.push_back("b");
        names__.push_back("theta_L");
        names__.push_back("yhat");
        names__.push_back("delta_coef");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_stap_penalties);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_z_T);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_rho);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_concentration);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(t);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ncol_smooth);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(q);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(len_theta_L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ncol_Z);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_sstap_continuous_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_tilde = in__.vector_constrain(P);
        size_t beta_tilde_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            vars__.push_back(beta_tilde(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau = in__.vector_lb_constrain(0, num_stap_penalties);
        size_t tau_j_1_max__ = num_stap_penalties;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            vars__.push_back(tau(j_1__));
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_b = in__.vector_constrain(q);
        size_t z_b_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < z_b_j_1_max__; ++j_1__) {
            vars__.push_back(z_b(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> z_T = in__.vector_constrain(len_z_T);
        size_t z_T_j_1_max__ = len_z_T;
        for (size_t j_1__ = 0; j_1__ < z_T_j_1_max__; ++j_1__) {
            vars__.push_back(z_T(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> rho = in__.vector_lub_constrain(0, 1, len_rho);
        size_t rho_j_1_max__ = len_rho;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            vars__.push_back(rho(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> zeta = in__.vector_lb_constrain(0, len_concentration);
        size_t zeta_j_1_max__ = len_concentration;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            vars__.push_back(zeta(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau_b = in__.vector_lb_constrain(0, t);
        size_t tau_b_j_1_max__ = t;
        for (size_t j_1__ = 0; j_1__ < tau_b_j_1_max__; ++j_1__) {
            vars__.push_back(tau_b(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 280;
            validate_non_negative_index("beta", "P", P);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta(P);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            stan::math::assign(beta,multiply(R_inv, beta_tilde));
            current_statement_begin__ = 281;
            validate_non_negative_index("sstap_beta", "ncol_smooth", ncol_smooth);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sstap_beta(ncol_smooth);
            stan::math::initialize(sstap_beta, DUMMY_VAR__);
            stan::math::fill(sstap_beta, DUMMY_VAR__);
            stan::math::assign(sstap_beta,stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_min_max((ncol_Z + 1), P), stan::model::nil_index_list()), "beta"));
            current_statement_begin__ = 282;
            validate_non_negative_index("eta", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> eta(N);
            stan::math::initialize(eta, DUMMY_VAR__);
            stan::math::fill(eta, DUMMY_VAR__);
            current_statement_begin__ = 286;
            validate_non_negative_index("b", "q", q);
            Eigen::Matrix<double, Eigen::Dynamic, 1> b(q);
            stan::math::initialize(b, DUMMY_VAR__);
            stan::math::fill(b, DUMMY_VAR__);
            current_statement_begin__ = 287;
            validate_non_negative_index("theta_L", "len_theta_L", len_theta_L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> theta_L(len_theta_L);
            stan::math::initialize(theta_L, DUMMY_VAR__);
            stan::math::fill(theta_L, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 289;
            if (as_bool(logical_gt(t, 0))) {
                current_statement_begin__ = 290;
                if (as_bool(logical_eq(special_case, 1))) {
                    {
                    current_statement_begin__ = 291;
                    int start(0);
                    (void) start;  // dummy to suppress unused var warning
                    stan::math::fill(start, std::numeric_limits<int>::min());
                    stan::math::assign(start,1);
                    current_statement_begin__ = 292;
                    stan::math::assign(theta_L, multiply(elt_multiply(scale, tau_b), sigma));
                    current_statement_begin__ = 293;
                    if (as_bool(logical_eq(t, 1))) {
                        current_statement_begin__ = 293;
                        stan::math::assign(b, multiply(get_base1(theta_L, 1, "theta_L", 1), z_b));
                    } else {
                        current_statement_begin__ = 294;
                        for (int i = 1; i <= t; ++i) {
                            {
                            current_statement_begin__ = 295;
                            int end(0);
                            (void) end;  // dummy to suppress unused var warning
                            stan::math::fill(end, std::numeric_limits<int>::min());
                            stan::math::assign(end,((start + get_base1(l, i, "l", 1)) - 1));
                            current_statement_begin__ = 296;
                            stan::model::assign(b, 
                                        stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), 
                                        multiply(get_base1(theta_L, i, "theta_L", 1), stan::model::rvalue(z_b, stan::model::cons_list(stan::model::index_min_max(start, end), stan::model::nil_index_list()), "z_b")), 
                                        "assigning variable b");
                            current_statement_begin__ = 297;
                            stan::math::assign(start, (end + 1));
                            }
                        }
                    }
                    }
                } else {
                    current_statement_begin__ = 301;
                    stan::math::assign(theta_L, make_theta_L(len_theta_L, p, sigma, tau_b, scale, zeta, rho, z_T, pstream__));
                    current_statement_begin__ = 303;
                    stan::math::assign(b, make_b(z_b, theta_L, p, l, pstream__));
                }
            }
            current_statement_begin__ = 308;
            stan::math::assign(eta, multiply(Q, beta_tilde));
            current_statement_begin__ = 310;
            if (as_bool(logical_gt(t, 0))) {
                current_statement_begin__ = 311;
                if (as_bool(special_case)) {
                    current_statement_begin__ = 311;
                    for (int i = 1; i <= t; ++i) {
                        current_statement_begin__ = 311;
                        stan::math::assign(eta, add(eta, stan::model::rvalue(b, stan::model::cons_list(stan::model::index_multi(get_base1(V, i, "V", 1)), stan::model::nil_index_list()), "b")));
                    }
                } else {
                    current_statement_begin__ = 312;
                    stan::math::assign(eta, add(eta, csr_matrix_times_vector(N, q, w, v, u, b)));
                }
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t beta_j_1_max__ = P;
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
                size_t sstap_beta_j_1_max__ = ncol_smooth;
                for (size_t j_1__ = 0; j_1__ < sstap_beta_j_1_max__; ++j_1__) {
                    vars__.push_back(sstap_beta(j_1__));
                }
                size_t eta_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                    vars__.push_back(eta(j_1__));
                }
                size_t b_j_1_max__ = q;
                for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                    vars__.push_back(b(j_1__));
                }
                size_t theta_L_j_1_max__ = len_theta_L;
                for (size_t j_1__ = 0; j_1__ < theta_L_j_1_max__; ++j_1__) {
                    vars__.push_back(theta_L(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 342;
            validate_non_negative_index("yhat", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> yhat(N);
            stan::math::initialize(yhat, DUMMY_VAR__);
            stan::math::fill(yhat, DUMMY_VAR__);
            stan::math::assign(yhat,multiply(Q, beta_tilde));
            current_statement_begin__ = 343;
            validate_non_negative_index("delta_coef", "ncol_Z", ncol_Z);
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta_coef(ncol_Z);
            stan::math::initialize(delta_coef, DUMMY_VAR__);
            stan::math::fill(delta_coef, DUMMY_VAR__);
            stan::math::assign(delta_coef,stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_min_max(1, ncol_Z), stan::model::nil_index_list()), "beta"));
            // validate, write generated quantities
            current_statement_begin__ = 342;
            size_t yhat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
                vars__.push_back(yhat(j_1__));
            }
            current_statement_begin__ = 343;
            size_t delta_coef_j_1_max__ = ncol_Z;
            for (size_t j_1__ = 0; j_1__ < delta_coef_j_1_max__; ++j_1__) {
                vars__.push_back(delta_coef(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_sstap_continuous";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_tilde_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_j_1_max__ = num_stap_penalties;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t z_b_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < z_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_T_j_1_max__ = len_z_T;
        for (size_t j_1__ = 0; j_1__ < z_T_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rho_j_1_max__ = len_rho;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_j_1_max__ = len_concentration;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_b_j_1_max__ = t;
        for (size_t j_1__ = 0; j_1__ < tau_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sstap_beta_j_1_max__ = ncol_smooth;
            for (size_t j_1__ = 0; j_1__ < sstap_beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sstap_beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t b_j_1_max__ = q;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_L_j_1_max__ = len_theta_L;
            for (size_t j_1__ = 0; j_1__ < theta_L_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_L" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t yhat_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yhat" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_coef_j_1_max__ = ncol_Z;
        for (size_t j_1__ = 0; j_1__ < delta_coef_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_coef" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_tilde_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_j_1_max__ = num_stap_penalties;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t z_b_j_1_max__ = q;
        for (size_t j_1__ = 0; j_1__ < z_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t z_T_j_1_max__ = len_z_T;
        for (size_t j_1__ = 0; j_1__ < z_T_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "z_T" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t rho_j_1_max__ = len_rho;
        for (size_t j_1__ = 0; j_1__ < rho_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "rho" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t zeta_j_1_max__ = len_concentration;
        for (size_t j_1__ = 0; j_1__ < zeta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "zeta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_b_j_1_max__ = t;
        for (size_t j_1__ = 0; j_1__ < tau_b_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau_b" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sstap_beta_j_1_max__ = ncol_smooth;
            for (size_t j_1__ = 0; j_1__ < sstap_beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sstap_beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t eta_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "eta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t b_j_1_max__ = q;
            for (size_t j_1__ = 0; j_1__ < b_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_L_j_1_max__ = len_theta_L;
            for (size_t j_1__ = 0; j_1__ < theta_L_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_L" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t yhat_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yhat" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_coef_j_1_max__ = ncol_Z;
        for (size_t j_1__ = 0; j_1__ < delta_coef_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_coef" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_sstap_continuous_namespace::model_sstap_continuous stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
