// Generated by rstantools.  Do not edit by hand.

/*
    rsstapstan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    rsstapstan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with rsstapstan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_sstap_continuous_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_sstap_continuous");
    reader.add_event(52, 50, "end", "model_sstap_continuous");
    return reader;
}
#include <stan_meta_header.hpp>
class model_sstap_continuous : public prob_grad {
private:
        int N;
        int ncol_Z;
        int ncol_smooth;
        int K_smooth;
        int num_stap;
        std::vector<int> stap_lengths;
        std::vector<int> stap_penalties;
        int num_stap_penalties;
        std::vector<std::vector<int> > stap_pen_map;
        std::vector<std::vector<int> > pen_ix;
        std::vector<std::vector<int> > beta_ix;
        int P;
        vector_d y;
        matrix_d Q;
        matrix_d R_inv;
        matrix_d S;
public:
    model_sstap_continuous(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_sstap_continuous(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_sstap_continuous_namespace::model_sstap_continuous";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "ncol_Z", "int", context__.to_vec());
            ncol_Z = int(0);
            vals_i__ = context__.vals_i("ncol_Z");
            pos__ = 0;
            ncol_Z = vals_i__[pos__++];
            check_greater_or_equal(function__, "ncol_Z", ncol_Z, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "ncol_smooth", "int", context__.to_vec());
            ncol_smooth = int(0);
            vals_i__ = context__.vals_i("ncol_smooth");
            pos__ = 0;
            ncol_smooth = vals_i__[pos__++];
            check_greater_or_equal(function__, "ncol_smooth", ncol_smooth, 1);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "K_smooth", "int", context__.to_vec());
            K_smooth = int(0);
            vals_i__ = context__.vals_i("K_smooth");
            pos__ = 0;
            K_smooth = vals_i__[pos__++];
            check_greater_or_equal(function__, "K_smooth", K_smooth, 1);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "num_stap", "int", context__.to_vec());
            num_stap = int(0);
            vals_i__ = context__.vals_i("num_stap");
            pos__ = 0;
            num_stap = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_stap", num_stap, 1);
            current_statement_begin__ = 9;
            validate_non_negative_index("stap_lengths", "num_stap", num_stap);
            context__.validate_dims("data initialization", "stap_lengths", "int", context__.to_vec(num_stap));
            stap_lengths = std::vector<int>(num_stap, int(0));
            vals_i__ = context__.vals_i("stap_lengths");
            pos__ = 0;
            size_t stap_lengths_k_0_max__ = num_stap;
            for (size_t k_0__ = 0; k_0__ < stap_lengths_k_0_max__; ++k_0__) {
                stap_lengths[k_0__] = vals_i__[pos__++];
            }
            size_t stap_lengths_i_0_max__ = num_stap;
            for (size_t i_0__ = 0; i_0__ < stap_lengths_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "stap_lengths[i_0__]", stap_lengths[i_0__], 1);
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("stap_penalties", "num_stap", num_stap);
            context__.validate_dims("data initialization", "stap_penalties", "int", context__.to_vec(num_stap));
            stap_penalties = std::vector<int>(num_stap, int(0));
            vals_i__ = context__.vals_i("stap_penalties");
            pos__ = 0;
            size_t stap_penalties_k_0_max__ = num_stap;
            for (size_t k_0__ = 0; k_0__ < stap_penalties_k_0_max__; ++k_0__) {
                stap_penalties[k_0__] = vals_i__[pos__++];
            }
            size_t stap_penalties_i_0_max__ = num_stap;
            for (size_t i_0__ = 0; i_0__ < stap_penalties_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "stap_penalties[i_0__]", stap_penalties[i_0__], 1);
            }
            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "num_stap_penalties", "int", context__.to_vec());
            num_stap_penalties = int(0);
            vals_i__ = context__.vals_i("num_stap_penalties");
            pos__ = 0;
            num_stap_penalties = vals_i__[pos__++];
            check_greater_or_equal(function__, "num_stap_penalties", num_stap_penalties, 1);
            current_statement_begin__ = 12;
            validate_non_negative_index("stap_pen_map", "num_stap", num_stap);
            validate_non_negative_index("stap_pen_map", "num_stap_penalties", num_stap_penalties);
            context__.validate_dims("data initialization", "stap_pen_map", "int", context__.to_vec(num_stap,num_stap_penalties));
            stap_pen_map = std::vector<std::vector<int> >(num_stap, std::vector<int>(num_stap_penalties, int(0)));
            vals_i__ = context__.vals_i("stap_pen_map");
            pos__ = 0;
            size_t stap_pen_map_k_0_max__ = num_stap;
            size_t stap_pen_map_k_1_max__ = num_stap_penalties;
            for (size_t k_1__ = 0; k_1__ < stap_pen_map_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < stap_pen_map_k_0_max__; ++k_0__) {
                    stap_pen_map[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t stap_pen_map_i_0_max__ = num_stap;
            size_t stap_pen_map_i_1_max__ = num_stap_penalties;
            for (size_t i_0__ = 0; i_0__ < stap_pen_map_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < stap_pen_map_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "stap_pen_map[i_0__][i_1__]", stap_pen_map[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("pen_ix", "num_stap_penalties", num_stap_penalties);
            validate_non_negative_index("pen_ix", "2", 2);
            context__.validate_dims("data initialization", "pen_ix", "int", context__.to_vec(num_stap_penalties,2));
            pen_ix = std::vector<std::vector<int> >(num_stap_penalties, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("pen_ix");
            pos__ = 0;
            size_t pen_ix_k_0_max__ = num_stap_penalties;
            size_t pen_ix_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < pen_ix_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < pen_ix_k_0_max__; ++k_0__) {
                    pen_ix[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t pen_ix_i_0_max__ = num_stap_penalties;
            size_t pen_ix_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < pen_ix_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < pen_ix_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "pen_ix[i_0__][i_1__]", pen_ix[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("beta_ix", "num_stap", num_stap);
            validate_non_negative_index("beta_ix", "2", 2);
            context__.validate_dims("data initialization", "beta_ix", "int", context__.to_vec(num_stap,2));
            beta_ix = std::vector<std::vector<int> >(num_stap, std::vector<int>(2, int(0)));
            vals_i__ = context__.vals_i("beta_ix");
            pos__ = 0;
            size_t beta_ix_k_0_max__ = num_stap;
            size_t beta_ix_k_1_max__ = 2;
            for (size_t k_1__ = 0; k_1__ < beta_ix_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < beta_ix_k_0_max__; ++k_0__) {
                    beta_ix[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            size_t beta_ix_i_0_max__ = num_stap;
            size_t beta_ix_i_1_max__ = 2;
            for (size_t i_0__ = 0; i_0__ < beta_ix_i_0_max__; ++i_0__) {
                for (size_t i_1__ = 0; i_1__ < beta_ix_i_1_max__; ++i_1__) {
                    check_greater_or_equal(function__, "beta_ix[i_0__][i_1__]", beta_ix[i_0__][i_1__], 1);
                }
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "P", "int", context__.to_vec());
            P = int(0);
            vals_i__ = context__.vals_i("P");
            pos__ = 0;
            P = vals_i__[pos__++];
            check_greater_or_equal(function__, "P", P, 1);
            current_statement_begin__ = 16;
            validate_non_negative_index("y", "N", N);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(N));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("Q", "N", N);
            validate_non_negative_index("Q", "P", P);
            context__.validate_dims("data initialization", "Q", "matrix_d", context__.to_vec(N,P));
            Q = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(N, P);
            vals_r__ = context__.vals_r("Q");
            pos__ = 0;
            size_t Q_j_2_max__ = P;
            size_t Q_j_1_max__ = N;
            for (size_t j_2__ = 0; j_2__ < Q_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Q_j_1_max__; ++j_1__) {
                    Q(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 18;
            validate_non_negative_index("R_inv", "P", P);
            validate_non_negative_index("R_inv", "P", P);
            context__.validate_dims("data initialization", "R_inv", "matrix_d", context__.to_vec(P,P));
            R_inv = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(P, P);
            vals_r__ = context__.vals_r("R_inv");
            pos__ = 0;
            size_t R_inv_j_2_max__ = P;
            size_t R_inv_j_1_max__ = P;
            for (size_t j_2__ = 0; j_2__ < R_inv_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < R_inv_j_1_max__; ++j_1__) {
                    R_inv(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("S", "ncol_smooth", ncol_smooth);
            validate_non_negative_index("S", "K_smooth", K_smooth);
            context__.validate_dims("data initialization", "S", "matrix_d", context__.to_vec(ncol_smooth,K_smooth));
            S = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(ncol_smooth, K_smooth);
            vals_r__ = context__.vals_r("S");
            pos__ = 0;
            size_t S_j_2_max__ = K_smooth;
            size_t S_j_1_max__ = ncol_smooth;
            for (size_t j_2__ = 0; j_2__ < S_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < S_j_1_max__; ++j_1__) {
                    S(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 22;
            validate_non_negative_index("beta_tilde", "P", P);
            num_params_r__ += P;
            current_statement_begin__ = 23;
            validate_non_negative_index("tau", "num_stap_penalties", num_stap_penalties);
            num_params_r__ += num_stap_penalties;
            current_statement_begin__ = 24;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_sstap_continuous() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 22;
        if (!(context__.contains_r("beta_tilde")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_tilde missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_tilde");
        pos__ = 0U;
        validate_non_negative_index("beta_tilde", "P", P);
        context__.validate_dims("parameter initialization", "beta_tilde", "vector_d", context__.to_vec(P));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_tilde(P);
        size_t beta_tilde_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            beta_tilde(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta_tilde);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_tilde: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        validate_non_negative_index("tau", "num_stap_penalties", num_stap_penalties);
        context__.validate_dims("parameter initialization", "tau", "vector_d", context__.to_vec(num_stap_penalties));
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau(num_stap_penalties);
        size_t tau_j_1_max__ = num_stap_penalties;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            tau(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 22;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta_tilde;
            (void) beta_tilde;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_tilde = in__.vector_constrain(P, lp__);
            else
                beta_tilde = in__.vector_constrain(P);
            current_statement_begin__ = 23;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.vector_lb_constrain(0, num_stap_penalties, lp__);
            else
                tau = in__.vector_lb_constrain(0, num_stap_penalties);
            current_statement_begin__ = 24;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "P", P);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta(P);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            stan::math::assign(beta,multiply(R_inv, beta_tilde));
            current_statement_begin__ = 28;
            validate_non_negative_index("sstap_beta", "ncol_smooth", ncol_smooth);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sstap_beta(ncol_smooth);
            stan::math::initialize(sstap_beta, DUMMY_VAR__);
            stan::math::fill(sstap_beta, DUMMY_VAR__);
            stan::math::assign(sstap_beta,stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_min_max((ncol_Z + 1), P), stan::model::nil_index_list()), "beta"));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 27;
            size_t beta_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 28;
            size_t sstap_beta_j_1_max__ = ncol_smooth;
            for (size_t j_1__ = 0; j_1__ < sstap_beta_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(sstap_beta(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sstap_beta" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable sstap_beta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 31;
            lp_accum__.add(cauchy_log<propto__>(sigma, 0, 5));
            current_statement_begin__ = 32;
            lp_accum__.add(exponential_log<propto__>(tau, 1));
            current_statement_begin__ = 33;
            lp_accum__.add(normal_log<propto__>(y, multiply(Q, beta_tilde), sigma));
            current_statement_begin__ = 36;
            for (int i = 1; i <= num_stap; ++i) {
                {
                current_statement_begin__ = 37;
                validate_non_negative_index("K", "get_base1(stap_lengths, i, \"stap_lengths\", 1)", get_base1(stap_lengths, i, "stap_lengths", 1));
                validate_non_negative_index("K", "get_base1(stap_lengths, i, \"stap_lengths\", 1)", get_base1(stap_lengths, i, "stap_lengths", 1));
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> K(get_base1(stap_lengths, i, "stap_lengths", 1), get_base1(stap_lengths, i, "stap_lengths", 1));
                stan::math::initialize(K, DUMMY_VAR__);
                stan::math::fill(K, DUMMY_VAR__);
                stan::math::assign(K,rep_matrix(0, get_base1(stap_lengths, i, "stap_lengths", 1), get_base1(stap_lengths, i, "stap_lengths", 1)));
                current_statement_begin__ = 38;
                for (int j = 1; j <= get_base1(stap_penalties, i, "stap_penalties", 1); ++j) {
                    {
                    current_statement_begin__ = 39;
                    int pen_mapper(0);
                    (void) pen_mapper;  // dummy to suppress unused var warning
                    stan::math::fill(pen_mapper, std::numeric_limits<int>::min());
                    stan::math::assign(pen_mapper,get_base1(get_base1(stap_pen_map, i, "stap_pen_map", 1), j, "stap_pen_map", 2));
                    current_statement_begin__ = 40;
                    stan::math::assign(K, add(K, multiply(stan::model::rvalue(S, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(beta_ix, i, "beta_ix", 1), 1, "beta_ix", 2), get_base1(get_base1(beta_ix, i, "beta_ix", 1), 2, "beta_ix", 2)), stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(pen_ix, pen_mapper, "pen_ix", 1), 1, "pen_ix", 2), get_base1(get_base1(pen_ix, pen_mapper, "pen_ix", 1), 2, "pen_ix", 2)), stan::model::nil_index_list())), "S"), diag_matrix(rep_vector(get_base1(tau, pen_mapper, "tau", 1), get_base1(stap_lengths, i, "stap_lengths", 1))))));
                    }
                }
                current_statement_begin__ = 42;
                lp_accum__.add(multi_normal_prec_log(stan::model::rvalue(sstap_beta, stan::model::cons_list(stan::model::index_min_max(get_base1(get_base1(beta_ix, i, "beta_ix", 1), 1, "beta_ix", 2), get_base1(get_base1(beta_ix, i, "beta_ix", 1), 2, "beta_ix", 2)), stan::model::nil_index_list()), "sstap_beta"), rep_vector(0, get_base1(stap_lengths, i, "stap_lengths", 1)), K));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_tilde");
        names__.push_back("tau");
        names__.push_back("sigma");
        names__.push_back("beta");
        names__.push_back("sstap_beta");
        names__.push_back("yhat");
        names__.push_back("delta");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(num_stap_penalties);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(P);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ncol_smooth);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(ncol_Z);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_sstap_continuous_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta_tilde = in__.vector_constrain(P);
        size_t beta_tilde_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            vars__.push_back(beta_tilde(j_1__));
        }
        Eigen::Matrix<double, Eigen::Dynamic, 1> tau = in__.vector_lb_constrain(0, num_stap_penalties);
        size_t tau_j_1_max__ = num_stap_penalties;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            vars__.push_back(tau(j_1__));
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 27;
            validate_non_negative_index("beta", "P", P);
            Eigen::Matrix<double, Eigen::Dynamic, 1> beta(P);
            stan::math::initialize(beta, DUMMY_VAR__);
            stan::math::fill(beta, DUMMY_VAR__);
            stan::math::assign(beta,multiply(R_inv, beta_tilde));
            current_statement_begin__ = 28;
            validate_non_negative_index("sstap_beta", "ncol_smooth", ncol_smooth);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sstap_beta(ncol_smooth);
            stan::math::initialize(sstap_beta, DUMMY_VAR__);
            stan::math::fill(sstap_beta, DUMMY_VAR__);
            stan::math::assign(sstap_beta,stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_min_max((ncol_Z + 1), P), stan::model::nil_index_list()), "beta"));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t beta_j_1_max__ = P;
                for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                    vars__.push_back(beta(j_1__));
                }
                size_t sstap_beta_j_1_max__ = ncol_smooth;
                for (size_t j_1__ = 0; j_1__ < sstap_beta_j_1_max__; ++j_1__) {
                    vars__.push_back(sstap_beta(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 48;
            validate_non_negative_index("yhat", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> yhat(N);
            stan::math::initialize(yhat, DUMMY_VAR__);
            stan::math::fill(yhat, DUMMY_VAR__);
            stan::math::assign(yhat,multiply(Q, beta_tilde));
            current_statement_begin__ = 49;
            validate_non_negative_index("delta", "ncol_Z", ncol_Z);
            Eigen::Matrix<double, Eigen::Dynamic, 1> delta(ncol_Z);
            stan::math::initialize(delta, DUMMY_VAR__);
            stan::math::fill(delta, DUMMY_VAR__);
            stan::math::assign(delta,stan::model::rvalue(beta, stan::model::cons_list(stan::model::index_min_max(1, ncol_Z), stan::model::nil_index_list()), "beta"));
            // validate, write generated quantities
            current_statement_begin__ = 48;
            size_t yhat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
                vars__.push_back(yhat(j_1__));
            }
            current_statement_begin__ = 49;
            size_t delta_j_1_max__ = ncol_Z;
            for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
                vars__.push_back(delta(j_1__));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_sstap_continuous";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_tilde_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_j_1_max__ = num_stap_penalties;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sstap_beta_j_1_max__ = ncol_smooth;
            for (size_t j_1__ = 0; j_1__ < sstap_beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sstap_beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t yhat_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yhat" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_j_1_max__ = ncol_Z;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_tilde_j_1_max__ = P;
        for (size_t j_1__ = 0; j_1__ < beta_tilde_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_tilde" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t tau_j_1_max__ = num_stap_penalties;
        for (size_t j_1__ = 0; j_1__ < tau_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "tau" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t beta_j_1_max__ = P;
            for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t sstap_beta_j_1_max__ = ncol_smooth;
            for (size_t j_1__ = 0; j_1__ < sstap_beta_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "sstap_beta" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t yhat_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < yhat_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "yhat" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t delta_j_1_max__ = ncol_Z;
        for (size_t j_1__ = 0; j_1__ < delta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_sstap_continuous_namespace::model_sstap_continuous stan_model;
#endif
